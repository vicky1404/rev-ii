<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<artifactId>ifrs</artifactId>
		<groupId>cl.mdr.ifrs</groupId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>ifrs-ejb</artifactId>
	<packaging>ejb</packaging>

	<name>ifrs EJB module</name>

	<dependencies>

		<!-- Declare the APIs we depend on and need for compilation. All of them 
			are provided by JBoss AS 7 -->

		<!-- Import the EJB API, we use provided scope as the API is included in 
			JBoss AS 7 -->

		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<version>1.0.2.Final</version><!--$NO-MVN-MAN-VER$ -->
		</dependency>

		<!-- Import the CDI API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<!-- dependency> <groupId>javax.enterprise</groupId> <artifactId>cdi-api</artifactId> 
			<scope>provided</scope> </dependency -->

		<!-- Import the JPA API, we use provided scope as the API is included in 
			JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>3.5.6-Final</version>
		</dependency>

		<!-- JSR-303 (Bean Validation) Implementation -->
		<!-- Provides portable constraints such as @Email -->
		<!-- Hibernate Validator is shipped in JBoss AS 7 -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Now we declare any tools needed -->

		<!-- Annotation processor to generate the JPA 2.0 metamodel classes for 
			typesafe criteria queries -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Annotation processor that raising compilation errors whenever constraint 
			annotations are incorrectly used. -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator-annotation-processor</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Guava -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>r03</version>
		</dependency>

		<!-- Gson -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.2.1</version>
			<scope>compile</scope>
		</dependency>

		<!-- Test scope dependencies -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
		</dependency>
		
		<!-- Jtidy -->
		<dependency>
			<groupId>net.sf.jtidy</groupId>
			<artifactId>jtidy</artifactId>
			<version>r938</version>
		</dependency>

		<!-- Apache Common Lang 3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.0</version>
		</dependency>

		<!-- Apache Xalan -->
		<dependency>
			<groupId>xalan</groupId>
			<artifactId>xalan</artifactId>
			<version>2.4.0</version>
		</dependency>

		<!-- Lamda j -->
		<dependency>
			<groupId>com.googlecode.lambdaj</groupId>
			<artifactId>lambdaj</artifactId>
			<version>2.3.3</version>
		</dependency>

		<!-- Apache POI 3.8 -->
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-scratchpad</artifactId>
			<version>3.8</version>
		</dependency>

		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.8</version>
		</dependency>

		<!-- Apache Common Bean Utils -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.7.0</version>
		</dependency>

		<!-- Docx4j -->
		<dependency>
			<groupId>org.docx4j</groupId>
			<artifactId>docx4j</artifactId>
			<version>2.7.1</version>
		</dependency>

		<!-- Jaxb -->
		<dependency>
			<groupId>com.sun.xml.bind</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.2.5-2</version>
		</dependency>



		<dependency>
			<groupId>org.example</groupId>
			<artifactId>java2word</artifactId>
			<scope>system</scope>
			<version>1.0</version>
			<systemPath>${project.basedir}/lib/java2word.jar</systemPath>
		</dependency>

		<dependency>
			<groupId>xbrlcore</groupId>
			<artifactId>xbrl-core</artifactId>
			<scope>system</scope>
			<version>1.0</version>
			<systemPath>${project.basedir}/lib/xbrl-core-0.0.1-SNAPSHOT.jar</systemPath>
		</dependency>

		<!-- dependency> <groupId>xbrlcore</groupId> <artifactId>xbrl-core</artifactId> 
			<version>0.0.1-SNAPSHOT</version> <scope>provided</scope> </dependency -->

		<dependency>
			<groupId>commons-collections</groupId>
			<artifactId>commons-collections</artifactId>
			<version>3.1</version>
		</dependency>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
		</dependency>
		<dependency>
			<groupId>javax.mail</groupId>
			<artifactId>mail</artifactId>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<artifactId>maven-ejb-plugin</artifactId>
				<version>2.3</version>
				<configuration>
					<!-- Tell Maven we are using EJB 3.1 -->
					<ejbVersion>3.1</ejbVersion>
				</configuration>
			</plugin>


			<!-- plugin> <artifactId>maven-antrun-plugin</artifactId> <dependencies> 
				<dependency> <groupId>yguard</groupId> <artifactId>yguard</artifactId> <version>2.4</version> 
				<scope>system</scope> <systemPath>${project.basedir}\src\test\resources\yguard.jar</systemPath> 
				</dependency> </dependencies> <executions> <execution> <phase>package</phase> 
				<configuration> <tasks> <property refid="maven.compile.classpath" name="mvn.classpath"></property> 
				<taskdef name="yguard" classname="com.yworks.yguard.YGuardTask" ></taskdef> 
				<yguard> <externalclasses> <pathelement path="${mvn.classpath}"></pathelement> 
				</externalclasses> <inoutpair in="${project.build.directory}/${project.build.finalName}.jar" 
				out="${project.build.directory}/${project.build.finalName}-ofuscado.jar" 
				/> <rename logfile="${project.build.directory}/yguard.log.xml" replaceClassNameStrings="true" 
				> <keep> <class classes="public" methods="public"></class> <class classes="protected" 
				methods="protected" fields="protected"></class> <class classes="public" methods="public" 
				fields="private"> <patternset> <include name="**.*Entity"/> </patternset> 
				</class> </keep> </rename> </yguard> </tasks> </configuration> <goals> <goal>run</goal> 
				</goals> </execution> </executions> </plugin -->
		</plugins>
	</build>

	<profiles>
		<profile>
			<!-- The default profile skips all tests, though you can tune it to run 
				just unit tests based on a custom pattern -->
			<!-- Seperate profiles are provided for running all tests, including Arquillian 
				tests that execute in the specified container -->
			<id>default</id>
			<activation>
				<activeByDefault>true</activeByDefault>
			</activation>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-surefire-plugin</artifactId>
						<version>2.4.3</version>
						<configuration>
							<skip>true</skip>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in your 
				JBoss AS instance -->
			<!-- This profile will start a new JBoss AS instance, and execute the 
				test, shutting it down when done -->
			<!-- Run with: mvn clean test -Parq-jbossas-managed -->
			<id>arq-jbossas-managed</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-managed</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

		<profile>
			<!-- An optional Arquillian testing profile that executes tests in a remote 
				JBoss AS instance -->
			<!-- Run with: mvn clean test -Parq-jbossas-remote -->
			<id>arq-jbossas-remote</id>
			<dependencies>
				<dependency>
					<groupId>org.jboss.as</groupId>
					<artifactId>jboss-as-arquillian-container-remote</artifactId>
					<scope>test</scope>
				</dependency>
			</dependencies>
		</profile>

	</profiles>

</project>
